// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String
  password String
  postsAuthored Post[]
  postsLiked Like[]
  postsReacted React[]
  characters Character[]
  messagesSent Message[]
}

model Post {
  id Int @id @default(autoincrement())
  timestamp DateTime @default(now())
  content String
  likes Like[]
  reacts React[]
  parent Post? @relation("parentchild",fields: [parentId],references: [id])
  parentId Int?
  author User @relation(fields: [authorId],references: [id])
  authorId Int
  children Post[] @relation("parentchild")
}

model Like {
  user User @relation(fields: [userId],references: [id])
  userId Int
  post Post @relation(fields: [postId],references: [id])
  postId Int

  @@id([userId,postId])
}

model Reaction {
  id Int @id @default(autoincrement())
  character String
  posts React[]
}

model React {
  userId Int
  postId Int
  reactionId Int
  user User @relation(fields: [userId],references: [id])
  post Post @relation(fields: [postId],references: [id])
  reaction Reaction @relation(fields: [reactionId],references: [id])

  @@id([userId,reactionId])
}

model Character {
  id Int @id @default(autoincrement())
  name String
  prompt String
  creatorId Int
  creator User @relation(fields: [creatorId],references: [id])
  messages Message[]
}

model Message {
  id Int @id @default(autoincrement())
  senderId Int
  recieverId Int
  sender User @relation(fields: [senderId],references: [id])
  reciever Character @relation(fields: [recieverId],references: [id])
  content String
  timestamp DateTime @default(now())
}